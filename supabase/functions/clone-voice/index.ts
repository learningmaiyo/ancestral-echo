import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { personaId, voiceName, audioSamples } = await req.json();
    
    if (!personaId || !voiceName || !audioSamples || audioSamples.length === 0) {
      throw new Error('Persona ID, voice name, and audio samples are required');
    }

    const ELEVENLABS_API_KEY = Deno.env.get('ELEVENLABS_API_KEY');
    if (!ELEVENLABS_API_KEY) {
      throw new Error('ELEVENLABS_API_KEY is not set');
    }

    console.log('Starting voice cloning for persona:', personaId);
    console.log('Audio samples count:', audioSamples.length);
    console.log('Voice name:', voiceName);

    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    // Get persona details
    const { data: persona, error: personaError } = await supabase
      .from('personas')
      .select('*')
      .eq('id', personaId)
      .single();

    if (personaError || !persona) {
      throw new Error('Persona not found');
    }

    // Update status to training
    await supabase
      .from('personas')
      .update({ 
        voice_model_status: 'training',
        voice_samples_count: audioSamples.length 
      })
      .eq('id', personaId);

    // Prepare audio files for ElevenLabs
    const files: FormData = new FormData();
    
    for (let i = 0; i < audioSamples.length; i++) {
      const sample = audioSamples[i];
      
      // Download audio file from Supabase Storage
      console.log(`Processing audio sample ${i + 1}:`, sample.audioUrl);
      
      const audioResponse = await fetch(sample.audioUrl);
      if (!audioResponse.ok) {
        throw new Error(`Failed to download audio sample: ${sample.audioUrl}`);
      }
      
      const audioBlob = await audioResponse.blob();
      files.append('files', audioBlob, `sample_${i + 1}.wav`);
    }

    // Add voice metadata
    files.append('name', voiceName);
    files.append('description', `Voice clone for ${voiceName} - Generated by Digital Storyteller`);
    
    // Optional: Add labels for better organization
    files.append('labels', JSON.stringify({
      'source': 'digital_storyteller',
      'persona_id': personaId,
      'created_at': new Date().toISOString()
    }));

    // Create voice clone with ElevenLabs
    console.log('Sending voice cloning request to ElevenLabs...');
    
    const response = await fetch('https://api.elevenlabs.io/v1/voices/add', {
      method: 'POST',
      headers: {
        'xi-api-key': ELEVENLABS_API_KEY,
      },
      body: files,
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('ElevenLabs API error:', response.status, errorText);
      
      // Update status to failed with detailed error
      await supabase
        .from('personas')
        .update({ 
          voice_model_status: 'failed',
          voice_samples_count: 0
        })
        .eq('id', personaId);
        
      throw new Error(`Voice cloning failed: ${response.status} - ${errorText}`);
    }

    const voiceData = await response.json();
    console.log('Voice cloning successful:', voiceData);

    // Update persona with voice model ID and set status to ready
    const { error: updateError } = await supabase
      .from('personas')
      .update({ 
        voice_model_id: voiceData.voice_id,
        voice_model_status: 'ready'
      })
      .eq('id', personaId);

    if (updateError) {
      console.error('Error updating persona:', updateError);
      throw new Error('Failed to update persona with voice model');
    }

    // Store voice samples in database for tracking
    for (const sample of audioSamples) {
      await supabase
        .from('voice_samples')
        .insert({
          persona_id: personaId,
          recording_id: sample.recordingId,
          audio_url: sample.audioUrl,
          duration_seconds: sample.durationSeconds,
          quality_score: sample.qualityScore || 0.8,
          is_used_for_training: true
        });
    }

    console.log('Voice cloning completed successfully');

    return new Response(JSON.stringify({ 
      success: true,
      voiceId: voiceData.voice_id,
      voiceName: voiceData.name,
      message: 'Voice cloning completed successfully'
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error("Error in voice cloning:", error);
    
    // Ensure persona status is reset on any error
    try {
      const { personaId } = await req.json();
      if (personaId) {
        const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
        const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
        const supabase = createClient(supabaseUrl, supabaseKey);
        
        await supabase
          .from('personas')
          .update({ 
            voice_model_status: 'failed',
            voice_samples_count: 0
          })
          .eq('id', personaId);
      }
    } catch (cleanupError) {
      console.error("Failed to cleanup persona status:", cleanupError);
    }
    
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});